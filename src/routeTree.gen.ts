/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CafesIndexRouteImport } from './routes/cafes/index'
import { Route as TasksTask6SolutionRouteImport } from './routes/tasks/task6-solution'
import { Route as TasksTask6RouteImport } from './routes/tasks/task6'
import { Route as TasksTask4SolutionRouteImport } from './routes/tasks/task4-solution'
import { Route as TasksTask4RouteImport } from './routes/tasks/task4'
import { Route as TasksTask3SolutionRouteImport } from './routes/tasks/task3-solution'
import { Route as TasksTask3RouteImport } from './routes/tasks/task3'
import { Route as TasksTask2SolutionRouteImport } from './routes/tasks/task2-solution'
import { Route as TasksTask2RouteImport } from './routes/tasks/task2'
import { Route as TasksTask1SolutionRouteImport } from './routes/tasks/task1-solution'
import { Route as TasksTask1RouteImport } from './routes/tasks/task1'
import { Route as CafesIdRouteImport } from './routes/cafes/$id'
import { Route as TasksTask5IdRouteImport } from './routes/tasks/task5.$id'
import { Route as TasksTask5SolutionIdRouteImport } from './routes/tasks/task5-solution.$id'
import { Route as TasksTask4DynamicIdRouteImport } from './routes/tasks/task4-dynamic.$id'
import { ServerRoute as ApiCafesServerRouteImport } from './routes/api/cafes'
import { ServerRoute as ApiCafesIdServerRouteImport } from './routes/api/cafes.$id'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CafesIndexRoute = CafesIndexRouteImport.update({
  id: '/cafes/',
  path: '/cafes/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask6SolutionRoute = TasksTask6SolutionRouteImport.update({
  id: '/tasks/task6-solution',
  path: '/tasks/task6-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask6Route = TasksTask6RouteImport.update({
  id: '/tasks/task6',
  path: '/tasks/task6',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask4SolutionRoute = TasksTask4SolutionRouteImport.update({
  id: '/tasks/task4-solution',
  path: '/tasks/task4-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask4Route = TasksTask4RouteImport.update({
  id: '/tasks/task4',
  path: '/tasks/task4',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask3SolutionRoute = TasksTask3SolutionRouteImport.update({
  id: '/tasks/task3-solution',
  path: '/tasks/task3-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask3Route = TasksTask3RouteImport.update({
  id: '/tasks/task3',
  path: '/tasks/task3',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask2SolutionRoute = TasksTask2SolutionRouteImport.update({
  id: '/tasks/task2-solution',
  path: '/tasks/task2-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask2Route = TasksTask2RouteImport.update({
  id: '/tasks/task2',
  path: '/tasks/task2',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask1SolutionRoute = TasksTask1SolutionRouteImport.update({
  id: '/tasks/task1-solution',
  path: '/tasks/task1-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask1Route = TasksTask1RouteImport.update({
  id: '/tasks/task1',
  path: '/tasks/task1',
  getParentRoute: () => rootRouteImport,
} as any)
const CafesIdRoute = CafesIdRouteImport.update({
  id: '/cafes/$id',
  path: '/cafes/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask5IdRoute = TasksTask5IdRouteImport.update({
  id: '/tasks/task5/$id',
  path: '/tasks/task5/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask5SolutionIdRoute = TasksTask5SolutionIdRouteImport.update({
  id: '/tasks/task5-solution/$id',
  path: '/tasks/task5-solution/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTask4DynamicIdRoute = TasksTask4DynamicIdRouteImport.update({
  id: '/tasks/task4-dynamic/$id',
  path: '/tasks/task4-dynamic/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCafesServerRoute = ApiCafesServerRouteImport.update({
  id: '/api/cafes',
  path: '/api/cafes',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCafesIdServerRoute = ApiCafesIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiCafesServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks/task1': typeof TasksTask1Route
  '/tasks/task1-solution': typeof TasksTask1SolutionRoute
  '/tasks/task2': typeof TasksTask2Route
  '/tasks/task2-solution': typeof TasksTask2SolutionRoute
  '/tasks/task3': typeof TasksTask3Route
  '/tasks/task3-solution': typeof TasksTask3SolutionRoute
  '/tasks/task4': typeof TasksTask4Route
  '/tasks/task4-solution': typeof TasksTask4SolutionRoute
  '/tasks/task6': typeof TasksTask6Route
  '/tasks/task6-solution': typeof TasksTask6SolutionRoute
  '/cafes': typeof CafesIndexRoute
  '/tasks/task4-dynamic/$id': typeof TasksTask4DynamicIdRoute
  '/tasks/task5-solution/$id': typeof TasksTask5SolutionIdRoute
  '/tasks/task5/$id': typeof TasksTask5IdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks/task1': typeof TasksTask1Route
  '/tasks/task1-solution': typeof TasksTask1SolutionRoute
  '/tasks/task2': typeof TasksTask2Route
  '/tasks/task2-solution': typeof TasksTask2SolutionRoute
  '/tasks/task3': typeof TasksTask3Route
  '/tasks/task3-solution': typeof TasksTask3SolutionRoute
  '/tasks/task4': typeof TasksTask4Route
  '/tasks/task4-solution': typeof TasksTask4SolutionRoute
  '/tasks/task6': typeof TasksTask6Route
  '/tasks/task6-solution': typeof TasksTask6SolutionRoute
  '/cafes': typeof CafesIndexRoute
  '/tasks/task4-dynamic/$id': typeof TasksTask4DynamicIdRoute
  '/tasks/task5-solution/$id': typeof TasksTask5SolutionIdRoute
  '/tasks/task5/$id': typeof TasksTask5IdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks/task1': typeof TasksTask1Route
  '/tasks/task1-solution': typeof TasksTask1SolutionRoute
  '/tasks/task2': typeof TasksTask2Route
  '/tasks/task2-solution': typeof TasksTask2SolutionRoute
  '/tasks/task3': typeof TasksTask3Route
  '/tasks/task3-solution': typeof TasksTask3SolutionRoute
  '/tasks/task4': typeof TasksTask4Route
  '/tasks/task4-solution': typeof TasksTask4SolutionRoute
  '/tasks/task6': typeof TasksTask6Route
  '/tasks/task6-solution': typeof TasksTask6SolutionRoute
  '/cafes/': typeof CafesIndexRoute
  '/tasks/task4-dynamic/$id': typeof TasksTask4DynamicIdRoute
  '/tasks/task5-solution/$id': typeof TasksTask5SolutionIdRoute
  '/tasks/task5/$id': typeof TasksTask5IdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cafes/$id'
    | '/tasks/task1'
    | '/tasks/task1-solution'
    | '/tasks/task2'
    | '/tasks/task2-solution'
    | '/tasks/task3'
    | '/tasks/task3-solution'
    | '/tasks/task4'
    | '/tasks/task4-solution'
    | '/tasks/task6'
    | '/tasks/task6-solution'
    | '/cafes'
    | '/tasks/task4-dynamic/$id'
    | '/tasks/task5-solution/$id'
    | '/tasks/task5/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cafes/$id'
    | '/tasks/task1'
    | '/tasks/task1-solution'
    | '/tasks/task2'
    | '/tasks/task2-solution'
    | '/tasks/task3'
    | '/tasks/task3-solution'
    | '/tasks/task4'
    | '/tasks/task4-solution'
    | '/tasks/task6'
    | '/tasks/task6-solution'
    | '/cafes'
    | '/tasks/task4-dynamic/$id'
    | '/tasks/task5-solution/$id'
    | '/tasks/task5/$id'
  id:
    | '__root__'
    | '/'
    | '/cafes/$id'
    | '/tasks/task1'
    | '/tasks/task1-solution'
    | '/tasks/task2'
    | '/tasks/task2-solution'
    | '/tasks/task3'
    | '/tasks/task3-solution'
    | '/tasks/task4'
    | '/tasks/task4-solution'
    | '/tasks/task6'
    | '/tasks/task6-solution'
    | '/cafes/'
    | '/tasks/task4-dynamic/$id'
    | '/tasks/task5-solution/$id'
    | '/tasks/task5/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CafesIdRoute: typeof CafesIdRoute
  TasksTask1Route: typeof TasksTask1Route
  TasksTask1SolutionRoute: typeof TasksTask1SolutionRoute
  TasksTask2Route: typeof TasksTask2Route
  TasksTask2SolutionRoute: typeof TasksTask2SolutionRoute
  TasksTask3Route: typeof TasksTask3Route
  TasksTask3SolutionRoute: typeof TasksTask3SolutionRoute
  TasksTask4Route: typeof TasksTask4Route
  TasksTask4SolutionRoute: typeof TasksTask4SolutionRoute
  TasksTask6Route: typeof TasksTask6Route
  TasksTask6SolutionRoute: typeof TasksTask6SolutionRoute
  CafesIndexRoute: typeof CafesIndexRoute
  TasksTask4DynamicIdRoute: typeof TasksTask4DynamicIdRoute
  TasksTask5SolutionIdRoute: typeof TasksTask5SolutionIdRoute
  TasksTask5IdRoute: typeof TasksTask5IdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/cafes' | '/api/cafes/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/cafes' | '/api/cafes/$id'
  id: '__root__' | '/api/cafes' | '/api/cafes/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCafesServerRoute: typeof ApiCafesServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafes/': {
      id: '/cafes/'
      path: '/cafes'
      fullPath: '/cafes'
      preLoaderRoute: typeof CafesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task6-solution': {
      id: '/tasks/task6-solution'
      path: '/tasks/task6-solution'
      fullPath: '/tasks/task6-solution'
      preLoaderRoute: typeof TasksTask6SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task6': {
      id: '/tasks/task6'
      path: '/tasks/task6'
      fullPath: '/tasks/task6'
      preLoaderRoute: typeof TasksTask6RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task4-solution': {
      id: '/tasks/task4-solution'
      path: '/tasks/task4-solution'
      fullPath: '/tasks/task4-solution'
      preLoaderRoute: typeof TasksTask4SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task4': {
      id: '/tasks/task4'
      path: '/tasks/task4'
      fullPath: '/tasks/task4'
      preLoaderRoute: typeof TasksTask4RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task3-solution': {
      id: '/tasks/task3-solution'
      path: '/tasks/task3-solution'
      fullPath: '/tasks/task3-solution'
      preLoaderRoute: typeof TasksTask3SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task3': {
      id: '/tasks/task3'
      path: '/tasks/task3'
      fullPath: '/tasks/task3'
      preLoaderRoute: typeof TasksTask3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task2-solution': {
      id: '/tasks/task2-solution'
      path: '/tasks/task2-solution'
      fullPath: '/tasks/task2-solution'
      preLoaderRoute: typeof TasksTask2SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task2': {
      id: '/tasks/task2'
      path: '/tasks/task2'
      fullPath: '/tasks/task2'
      preLoaderRoute: typeof TasksTask2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task1-solution': {
      id: '/tasks/task1-solution'
      path: '/tasks/task1-solution'
      fullPath: '/tasks/task1-solution'
      preLoaderRoute: typeof TasksTask1SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task1': {
      id: '/tasks/task1'
      path: '/tasks/task1'
      fullPath: '/tasks/task1'
      preLoaderRoute: typeof TasksTask1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafes/$id': {
      id: '/cafes/$id'
      path: '/cafes/$id'
      fullPath: '/cafes/$id'
      preLoaderRoute: typeof CafesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task5/$id': {
      id: '/tasks/task5/$id'
      path: '/tasks/task5/$id'
      fullPath: '/tasks/task5/$id'
      preLoaderRoute: typeof TasksTask5IdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task5-solution/$id': {
      id: '/tasks/task5-solution/$id'
      path: '/tasks/task5-solution/$id'
      fullPath: '/tasks/task5-solution/$id'
      preLoaderRoute: typeof TasksTask5SolutionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/task4-dynamic/$id': {
      id: '/tasks/task4-dynamic/$id'
      path: '/tasks/task4-dynamic/$id'
      fullPath: '/tasks/task4-dynamic/$id'
      preLoaderRoute: typeof TasksTask4DynamicIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/cafes': {
      id: '/api/cafes'
      path: '/api/cafes'
      fullPath: '/api/cafes'
      preLoaderRoute: typeof ApiCafesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/cafes/$id': {
      id: '/api/cafes/$id'
      path: '/$id'
      fullPath: '/api/cafes/$id'
      preLoaderRoute: typeof ApiCafesIdServerRouteImport
      parentRoute: typeof ApiCafesServerRoute
    }
  }
}

interface ApiCafesServerRouteChildren {
  ApiCafesIdServerRoute: typeof ApiCafesIdServerRoute
}

const ApiCafesServerRouteChildren: ApiCafesServerRouteChildren = {
  ApiCafesIdServerRoute: ApiCafesIdServerRoute,
}

const ApiCafesServerRouteWithChildren = ApiCafesServerRoute._addFileChildren(
  ApiCafesServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CafesIdRoute: CafesIdRoute,
  TasksTask1Route: TasksTask1Route,
  TasksTask1SolutionRoute: TasksTask1SolutionRoute,
  TasksTask2Route: TasksTask2Route,
  TasksTask2SolutionRoute: TasksTask2SolutionRoute,
  TasksTask3Route: TasksTask3Route,
  TasksTask3SolutionRoute: TasksTask3SolutionRoute,
  TasksTask4Route: TasksTask4Route,
  TasksTask4SolutionRoute: TasksTask4SolutionRoute,
  TasksTask6Route: TasksTask6Route,
  TasksTask6SolutionRoute: TasksTask6SolutionRoute,
  CafesIndexRoute: CafesIndexRoute,
  TasksTask4DynamicIdRoute: TasksTask4DynamicIdRoute,
  TasksTask5SolutionIdRoute: TasksTask5SolutionIdRoute,
  TasksTask5IdRoute: TasksTask5IdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCafesServerRoute: ApiCafesServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
