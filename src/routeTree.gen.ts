/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CafesIndexRouteImport } from './routes/cafes/index'
import { Route as TasksRouterTask6SolutionRouteImport } from './routes/tasks-router/task6-solution'
import { Route as TasksRouterTask6RouteImport } from './routes/tasks-router/task6'
import { Route as TasksRouterTask4SolutionRouteImport } from './routes/tasks-router/task4-solution'
import { Route as TasksRouterTask4RouteImport } from './routes/tasks-router/task4'
import { Route as TasksRouterTask3SolutionRouteImport } from './routes/tasks-router/task3-solution'
import { Route as TasksRouterTask3RouteImport } from './routes/tasks-router/task3'
import { Route as TasksRouterTask2SolutionRouteImport } from './routes/tasks-router/task2-solution'
import { Route as TasksRouterTask2RouteImport } from './routes/tasks-router/task2'
import { Route as TasksRouterTask1SolutionRouteImport } from './routes/tasks-router/task1-solution'
import { Route as TasksRouterTask1RouteImport } from './routes/tasks-router/task1'
import { Route as TasksQueryTask1SolutionRouteImport } from './routes/tasks-query/task1-solution'
import { Route as TasksQueryTask1RouteImport } from './routes/tasks-query/task1'
import { Route as CafesIdRouteImport } from './routes/cafes/$id'
import { Route as TasksRouterTask5IdRouteImport } from './routes/tasks-router/task5.$id'
import { Route as TasksRouterTask5SolutionIdRouteImport } from './routes/tasks-router/task5-solution.$id'
import { Route as TasksRouterTask4DynamicIdRouteImport } from './routes/tasks-router/task4-dynamic.$id'
import { ServerRoute as ApiCafesServerRouteImport } from './routes/api/cafes'
import { ServerRoute as ApiCafesIdServerRouteImport } from './routes/api/cafes.$id'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CafesIndexRoute = CafesIndexRouteImport.update({
  id: '/cafes/',
  path: '/cafes/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask6SolutionRoute =
  TasksRouterTask6SolutionRouteImport.update({
    id: '/tasks-router/task6-solution',
    path: '/tasks-router/task6-solution',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask6Route = TasksRouterTask6RouteImport.update({
  id: '/tasks-router/task6',
  path: '/tasks-router/task6',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask4SolutionRoute =
  TasksRouterTask4SolutionRouteImport.update({
    id: '/tasks-router/task4-solution',
    path: '/tasks-router/task4-solution',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask4Route = TasksRouterTask4RouteImport.update({
  id: '/tasks-router/task4',
  path: '/tasks-router/task4',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask3SolutionRoute =
  TasksRouterTask3SolutionRouteImport.update({
    id: '/tasks-router/task3-solution',
    path: '/tasks-router/task3-solution',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask3Route = TasksRouterTask3RouteImport.update({
  id: '/tasks-router/task3',
  path: '/tasks-router/task3',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask2SolutionRoute =
  TasksRouterTask2SolutionRouteImport.update({
    id: '/tasks-router/task2-solution',
    path: '/tasks-router/task2-solution',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask2Route = TasksRouterTask2RouteImport.update({
  id: '/tasks-router/task2',
  path: '/tasks-router/task2',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask1SolutionRoute =
  TasksRouterTask1SolutionRouteImport.update({
    id: '/tasks-router/task1-solution',
    path: '/tasks-router/task1-solution',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask1Route = TasksRouterTask1RouteImport.update({
  id: '/tasks-router/task1',
  path: '/tasks-router/task1',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksQueryTask1SolutionRoute = TasksQueryTask1SolutionRouteImport.update({
  id: '/tasks-query/task1-solution',
  path: '/tasks-query/task1-solution',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksQueryTask1Route = TasksQueryTask1RouteImport.update({
  id: '/tasks-query/task1',
  path: '/tasks-query/task1',
  getParentRoute: () => rootRouteImport,
} as any)
const CafesIdRoute = CafesIdRouteImport.update({
  id: '/cafes/$id',
  path: '/cafes/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask5IdRoute = TasksRouterTask5IdRouteImport.update({
  id: '/tasks-router/task5/$id',
  path: '/tasks-router/task5/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksRouterTask5SolutionIdRoute =
  TasksRouterTask5SolutionIdRouteImport.update({
    id: '/tasks-router/task5-solution/$id',
    path: '/tasks-router/task5-solution/$id',
    getParentRoute: () => rootRouteImport,
  } as any)
const TasksRouterTask4DynamicIdRoute =
  TasksRouterTask4DynamicIdRouteImport.update({
    id: '/tasks-router/task4-dynamic/$id',
    path: '/tasks-router/task4-dynamic/$id',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiCafesServerRoute = ApiCafesServerRouteImport.update({
  id: '/api/cafes',
  path: '/api/cafes',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCafesIdServerRoute = ApiCafesIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiCafesServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks-query/task1': typeof TasksQueryTask1Route
  '/tasks-query/task1-solution': typeof TasksQueryTask1SolutionRoute
  '/tasks-router/task1': typeof TasksRouterTask1Route
  '/tasks-router/task1-solution': typeof TasksRouterTask1SolutionRoute
  '/tasks-router/task2': typeof TasksRouterTask2Route
  '/tasks-router/task2-solution': typeof TasksRouterTask2SolutionRoute
  '/tasks-router/task3': typeof TasksRouterTask3Route
  '/tasks-router/task3-solution': typeof TasksRouterTask3SolutionRoute
  '/tasks-router/task4': typeof TasksRouterTask4Route
  '/tasks-router/task4-solution': typeof TasksRouterTask4SolutionRoute
  '/tasks-router/task6': typeof TasksRouterTask6Route
  '/tasks-router/task6-solution': typeof TasksRouterTask6SolutionRoute
  '/cafes': typeof CafesIndexRoute
  '/tasks-router/task4-dynamic/$id': typeof TasksRouterTask4DynamicIdRoute
  '/tasks-router/task5-solution/$id': typeof TasksRouterTask5SolutionIdRoute
  '/tasks-router/task5/$id': typeof TasksRouterTask5IdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks-query/task1': typeof TasksQueryTask1Route
  '/tasks-query/task1-solution': typeof TasksQueryTask1SolutionRoute
  '/tasks-router/task1': typeof TasksRouterTask1Route
  '/tasks-router/task1-solution': typeof TasksRouterTask1SolutionRoute
  '/tasks-router/task2': typeof TasksRouterTask2Route
  '/tasks-router/task2-solution': typeof TasksRouterTask2SolutionRoute
  '/tasks-router/task3': typeof TasksRouterTask3Route
  '/tasks-router/task3-solution': typeof TasksRouterTask3SolutionRoute
  '/tasks-router/task4': typeof TasksRouterTask4Route
  '/tasks-router/task4-solution': typeof TasksRouterTask4SolutionRoute
  '/tasks-router/task6': typeof TasksRouterTask6Route
  '/tasks-router/task6-solution': typeof TasksRouterTask6SolutionRoute
  '/cafes': typeof CafesIndexRoute
  '/tasks-router/task4-dynamic/$id': typeof TasksRouterTask4DynamicIdRoute
  '/tasks-router/task5-solution/$id': typeof TasksRouterTask5SolutionIdRoute
  '/tasks-router/task5/$id': typeof TasksRouterTask5IdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cafes/$id': typeof CafesIdRoute
  '/tasks-query/task1': typeof TasksQueryTask1Route
  '/tasks-query/task1-solution': typeof TasksQueryTask1SolutionRoute
  '/tasks-router/task1': typeof TasksRouterTask1Route
  '/tasks-router/task1-solution': typeof TasksRouterTask1SolutionRoute
  '/tasks-router/task2': typeof TasksRouterTask2Route
  '/tasks-router/task2-solution': typeof TasksRouterTask2SolutionRoute
  '/tasks-router/task3': typeof TasksRouterTask3Route
  '/tasks-router/task3-solution': typeof TasksRouterTask3SolutionRoute
  '/tasks-router/task4': typeof TasksRouterTask4Route
  '/tasks-router/task4-solution': typeof TasksRouterTask4SolutionRoute
  '/tasks-router/task6': typeof TasksRouterTask6Route
  '/tasks-router/task6-solution': typeof TasksRouterTask6SolutionRoute
  '/cafes/': typeof CafesIndexRoute
  '/tasks-router/task4-dynamic/$id': typeof TasksRouterTask4DynamicIdRoute
  '/tasks-router/task5-solution/$id': typeof TasksRouterTask5SolutionIdRoute
  '/tasks-router/task5/$id': typeof TasksRouterTask5IdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cafes/$id'
    | '/tasks-query/task1'
    | '/tasks-query/task1-solution'
    | '/tasks-router/task1'
    | '/tasks-router/task1-solution'
    | '/tasks-router/task2'
    | '/tasks-router/task2-solution'
    | '/tasks-router/task3'
    | '/tasks-router/task3-solution'
    | '/tasks-router/task4'
    | '/tasks-router/task4-solution'
    | '/tasks-router/task6'
    | '/tasks-router/task6-solution'
    | '/cafes'
    | '/tasks-router/task4-dynamic/$id'
    | '/tasks-router/task5-solution/$id'
    | '/tasks-router/task5/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cafes/$id'
    | '/tasks-query/task1'
    | '/tasks-query/task1-solution'
    | '/tasks-router/task1'
    | '/tasks-router/task1-solution'
    | '/tasks-router/task2'
    | '/tasks-router/task2-solution'
    | '/tasks-router/task3'
    | '/tasks-router/task3-solution'
    | '/tasks-router/task4'
    | '/tasks-router/task4-solution'
    | '/tasks-router/task6'
    | '/tasks-router/task6-solution'
    | '/cafes'
    | '/tasks-router/task4-dynamic/$id'
    | '/tasks-router/task5-solution/$id'
    | '/tasks-router/task5/$id'
  id:
    | '__root__'
    | '/'
    | '/cafes/$id'
    | '/tasks-query/task1'
    | '/tasks-query/task1-solution'
    | '/tasks-router/task1'
    | '/tasks-router/task1-solution'
    | '/tasks-router/task2'
    | '/tasks-router/task2-solution'
    | '/tasks-router/task3'
    | '/tasks-router/task3-solution'
    | '/tasks-router/task4'
    | '/tasks-router/task4-solution'
    | '/tasks-router/task6'
    | '/tasks-router/task6-solution'
    | '/cafes/'
    | '/tasks-router/task4-dynamic/$id'
    | '/tasks-router/task5-solution/$id'
    | '/tasks-router/task5/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CafesIdRoute: typeof CafesIdRoute
  TasksQueryTask1Route: typeof TasksQueryTask1Route
  TasksQueryTask1SolutionRoute: typeof TasksQueryTask1SolutionRoute
  TasksRouterTask1Route: typeof TasksRouterTask1Route
  TasksRouterTask1SolutionRoute: typeof TasksRouterTask1SolutionRoute
  TasksRouterTask2Route: typeof TasksRouterTask2Route
  TasksRouterTask2SolutionRoute: typeof TasksRouterTask2SolutionRoute
  TasksRouterTask3Route: typeof TasksRouterTask3Route
  TasksRouterTask3SolutionRoute: typeof TasksRouterTask3SolutionRoute
  TasksRouterTask4Route: typeof TasksRouterTask4Route
  TasksRouterTask4SolutionRoute: typeof TasksRouterTask4SolutionRoute
  TasksRouterTask6Route: typeof TasksRouterTask6Route
  TasksRouterTask6SolutionRoute: typeof TasksRouterTask6SolutionRoute
  CafesIndexRoute: typeof CafesIndexRoute
  TasksRouterTask4DynamicIdRoute: typeof TasksRouterTask4DynamicIdRoute
  TasksRouterTask5SolutionIdRoute: typeof TasksRouterTask5SolutionIdRoute
  TasksRouterTask5IdRoute: typeof TasksRouterTask5IdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/cafes': typeof ApiCafesServerRouteWithChildren
  '/api/cafes/$id': typeof ApiCafesIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/cafes' | '/api/cafes/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/cafes' | '/api/cafes/$id'
  id: '__root__' | '/api/cafes' | '/api/cafes/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCafesServerRoute: typeof ApiCafesServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafes/': {
      id: '/cafes/'
      path: '/cafes'
      fullPath: '/cafes'
      preLoaderRoute: typeof CafesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task6-solution': {
      id: '/tasks-router/task6-solution'
      path: '/tasks-router/task6-solution'
      fullPath: '/tasks-router/task6-solution'
      preLoaderRoute: typeof TasksRouterTask6SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task6': {
      id: '/tasks-router/task6'
      path: '/tasks-router/task6'
      fullPath: '/tasks-router/task6'
      preLoaderRoute: typeof TasksRouterTask6RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task4-solution': {
      id: '/tasks-router/task4-solution'
      path: '/tasks-router/task4-solution'
      fullPath: '/tasks-router/task4-solution'
      preLoaderRoute: typeof TasksRouterTask4SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task4': {
      id: '/tasks-router/task4'
      path: '/tasks-router/task4'
      fullPath: '/tasks-router/task4'
      preLoaderRoute: typeof TasksRouterTask4RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task3-solution': {
      id: '/tasks-router/task3-solution'
      path: '/tasks-router/task3-solution'
      fullPath: '/tasks-router/task3-solution'
      preLoaderRoute: typeof TasksRouterTask3SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task3': {
      id: '/tasks-router/task3'
      path: '/tasks-router/task3'
      fullPath: '/tasks-router/task3'
      preLoaderRoute: typeof TasksRouterTask3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task2-solution': {
      id: '/tasks-router/task2-solution'
      path: '/tasks-router/task2-solution'
      fullPath: '/tasks-router/task2-solution'
      preLoaderRoute: typeof TasksRouterTask2SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task2': {
      id: '/tasks-router/task2'
      path: '/tasks-router/task2'
      fullPath: '/tasks-router/task2'
      preLoaderRoute: typeof TasksRouterTask2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task1-solution': {
      id: '/tasks-router/task1-solution'
      path: '/tasks-router/task1-solution'
      fullPath: '/tasks-router/task1-solution'
      preLoaderRoute: typeof TasksRouterTask1SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task1': {
      id: '/tasks-router/task1'
      path: '/tasks-router/task1'
      fullPath: '/tasks-router/task1'
      preLoaderRoute: typeof TasksRouterTask1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-query/task1-solution': {
      id: '/tasks-query/task1-solution'
      path: '/tasks-query/task1-solution'
      fullPath: '/tasks-query/task1-solution'
      preLoaderRoute: typeof TasksQueryTask1SolutionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-query/task1': {
      id: '/tasks-query/task1'
      path: '/tasks-query/task1'
      fullPath: '/tasks-query/task1'
      preLoaderRoute: typeof TasksQueryTask1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafes/$id': {
      id: '/cafes/$id'
      path: '/cafes/$id'
      fullPath: '/cafes/$id'
      preLoaderRoute: typeof CafesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task5/$id': {
      id: '/tasks-router/task5/$id'
      path: '/tasks-router/task5/$id'
      fullPath: '/tasks-router/task5/$id'
      preLoaderRoute: typeof TasksRouterTask5IdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task5-solution/$id': {
      id: '/tasks-router/task5-solution/$id'
      path: '/tasks-router/task5-solution/$id'
      fullPath: '/tasks-router/task5-solution/$id'
      preLoaderRoute: typeof TasksRouterTask5SolutionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks-router/task4-dynamic/$id': {
      id: '/tasks-router/task4-dynamic/$id'
      path: '/tasks-router/task4-dynamic/$id'
      fullPath: '/tasks-router/task4-dynamic/$id'
      preLoaderRoute: typeof TasksRouterTask4DynamicIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/cafes': {
      id: '/api/cafes'
      path: '/api/cafes'
      fullPath: '/api/cafes'
      preLoaderRoute: typeof ApiCafesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/cafes/$id': {
      id: '/api/cafes/$id'
      path: '/$id'
      fullPath: '/api/cafes/$id'
      preLoaderRoute: typeof ApiCafesIdServerRouteImport
      parentRoute: typeof ApiCafesServerRoute
    }
  }
}

interface ApiCafesServerRouteChildren {
  ApiCafesIdServerRoute: typeof ApiCafesIdServerRoute
}

const ApiCafesServerRouteChildren: ApiCafesServerRouteChildren = {
  ApiCafesIdServerRoute: ApiCafesIdServerRoute,
}

const ApiCafesServerRouteWithChildren = ApiCafesServerRoute._addFileChildren(
  ApiCafesServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CafesIdRoute: CafesIdRoute,
  TasksQueryTask1Route: TasksQueryTask1Route,
  TasksQueryTask1SolutionRoute: TasksQueryTask1SolutionRoute,
  TasksRouterTask1Route: TasksRouterTask1Route,
  TasksRouterTask1SolutionRoute: TasksRouterTask1SolutionRoute,
  TasksRouterTask2Route: TasksRouterTask2Route,
  TasksRouterTask2SolutionRoute: TasksRouterTask2SolutionRoute,
  TasksRouterTask3Route: TasksRouterTask3Route,
  TasksRouterTask3SolutionRoute: TasksRouterTask3SolutionRoute,
  TasksRouterTask4Route: TasksRouterTask4Route,
  TasksRouterTask4SolutionRoute: TasksRouterTask4SolutionRoute,
  TasksRouterTask6Route: TasksRouterTask6Route,
  TasksRouterTask6SolutionRoute: TasksRouterTask6SolutionRoute,
  CafesIndexRoute: CafesIndexRoute,
  TasksRouterTask4DynamicIdRoute: TasksRouterTask4DynamicIdRoute,
  TasksRouterTask5SolutionIdRoute: TasksRouterTask5SolutionIdRoute,
  TasksRouterTask5IdRoute: TasksRouterTask5IdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCafesServerRoute: ApiCafesServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
